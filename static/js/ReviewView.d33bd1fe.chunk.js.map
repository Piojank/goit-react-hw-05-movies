{"version":3,"file":"static/js/ReviewView.d33bd1fe.chunk.js","mappings":"4LAEaA,EAAW,WACtB,OAAO,2CACT,C,8GCDaC,EAAU,SAAH,GAAqB,IAAfC,EAAO,EAAPA,QACxB,OACE,8BACE,wBACGA,EAAQC,KAAI,gBAAGC,EAAE,EAAFA,GAAIC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAAO,OACjC,2BACE,qCAAaD,MACb,uBAAIC,MAFGF,EAGJ,OAKf,E,oBCMA,EAhBmB,WACjB,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAG,eAAnCP,EAAO,KAAEQ,EAAU,KAW1B,OATAC,EAAAA,EAAAA,YAAU,WACR,IAAIC,GAAY,EAGhB,OAFAC,EAAAA,EAAAA,IAAeN,GAASO,MAAK,SAAAC,GAAI,OAAKH,GAAaF,EAAWK,EAAK,IAE5D,WACLH,GAAY,CACd,CACF,GAAG,CAACL,KAEG,8BAAGL,EAAQc,OAAS,GAAI,SAACf,EAAO,CAACC,QAASA,KAAc,SAACF,EAAA,EAAQ,KAC1E,C","sources":["Components/MoreInfo/NotFound/NotFound.jsx","Components/MoreInfo/Reviews/Reviews.jsx","views/movieDetails/ReviewView.js"],"sourcesContent":["import React from 'react';\n\nexport const NotFound = () => {\n  return <p>Eror, not found!</p>;\n};\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\n\nexport const Reviews = ({ reviews }) => {\n  return (\n    <section>\n      <ul>\n        {reviews.map(({ id, author, content }) => (\n          <li key={id}>\n            <h3>Author: {author}</h3>\n            <p>{content}</p>\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    }),\n  ),\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Reviews } from 'Components/MoreInfo/Reviews/Reviews';\nimport { getReviewsInfo } from '../../api/api';\nimport { NotFound } from 'Components/MoreInfo/NotFound/NotFound';\n\nconst ReviewView = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    let cancelled = false;\n    getReviewsInfo(movieId).then(data => !cancelled && setReviews(data));\n\n    return () => {\n      cancelled = true;\n    };\n  }, [movieId]);\n\n  return <>{reviews.length > 0 ? <Reviews reviews={reviews} /> : <NotFound />}</>;\n};\n\nexport default ReviewView;\n"],"names":["NotFound","Reviews","reviews","map","id","author","content","movieId","useParams","useState","setReviews","useEffect","cancelled","getReviewsInfo","then","data","length"],"sourceRoot":""}